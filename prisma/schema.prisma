generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String   @default("USER") // USER, ADMIN, STUDENT
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier], name: "identifier_index")
  @@map("verification_tokens")
}

model Term {
  id        String   @id @default(cuid()) @map("_id")
  name      String   @unique // e.g., "Term 1 2024"
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)

  payments Payment[]
}

model SchoolClass {
  id      String    @id @default(cuid()) @map("_id")
  name    String    @unique // e.g., "Form 1", "Form 4", "Graduated"
  termFee Float     // The fee per term for this class

  students Student[]
}

// Simple School Models
model Student {
  id              String   @id @default(cuid()) @map("_id")
  name            String
  admissionNumber String   @unique
  status          String   @default("ACTIVE") // "ACTIVE", "GRADUATED"
  createdAt       DateTime @default(now())
  arrears         Float    @default(0)

  schoolClassId String
  schoolClass   SchoolClass @relation(fields: [schoolClassId], references: [id])

  payments Payment[]

  @@index([schoolClassId])
}

model Payment {
  id         String   @id @default(cuid()) @map("_id")
  amount     Float
  method     String
  reference  String?
  notes      String?
  recordedBy String
  createdAt  DateTime @default(now())

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // âœ… THE FIX: Added '?' to make the field and relation optional.
  termId String?
  term   Term? @relation(fields: [termId], references: [id])

  @@index([studentId])
  // We can't index an optional field in the same way, but Prisma handles this gracefully.
  // The relation itself provides efficient lookups.
  @@index([termId])
}

model PromotionLog {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  triggeredBy String   // Admin's name or ID
  status    String   @default("COMMITTED") // "COMMITTED", "ROLLED_BACK"

  studentRecords StudentPromotionRecord[]
}

model StudentPromotionRecord {
  id        String   @id @default(cuid()) @map("_id")
 studentId String   // This field holds the cuid of the Student
  studentName String

  previousSchoolClassId String // This field holds the cuid of the old SchoolClass
  newSchoolClassId      String // This field holds the cuid of the new SchoolClass

  promotionLogId String

  promotionLog   PromotionLog @relation(fields: [promotionLogId], references: [id], onDelete: Cascade)

  @@index([promotionLogId])
}

